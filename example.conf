init_worker_by_lua_block {

}

upstream dynamic-upstream {
	server 127.0.0.1:2222;

	balancer_by_lua_block {
		local balancer = require "ngx.balancer"
		local picker = require "dyups.picker"
		local name = ngx.var.backname
		if not name then
		    assert(balancer.set_current_peer("127.0.0.1", 2222))
		    return
		end
		
		local s, err = picker.rr(name)
		if not s then
		    ngx.log(ngx.ERR, err)
		    assert(balancer.set_current_peer("127.0.0.1", 2222))
		    return
		end
		
		if not ngx.ctx.tries then
		    ngx.ctx.tries = 0
		end
		
		if ngx.ctx.tries < 2 then
		    local ok, err = balancer.set_more_tries(1)
		    if not ok then
		        return error("failed to set more tries: ", err)
		    elseif err then
		        ngx.log(ngx.WARN, "set more tries: ", err)
		    end
		end
		
		ngx.ctx.tries = ngx.ctx.tries + 1
		
		assert(balancer.set_current_peer(s.host, s.port))
	}

	keepalive 30;
}

server {
    listen 80 default_server;
    server_name _;

    location / {
        # balancer_by_lua use $backname to set the backend.
        set_by_lua_block $backname {
            return ngx.var.host:match("([^.]*)%.svc%.pre%.ali%.keep")
        }

        proxy_set_header Host $http_host;
        proxy_pass http://dynamic-upstream;
    }

    location /dyups {
        content_by_lua_block {
            local picker = require "dyups.picker"
            local json = require "cjson"
            local name = ngx.var.arg_svcname
            local all = picker.show(name)
            ngx.say(json.encode(all))
        }
    }
}

server {
    listen 127.0.0.1:2222 default_server;
    server_name _;
    access_log off;

    location / {
        return 502 'LUA dynamic-upstream: No backend found.';
    }
}
